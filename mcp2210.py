# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mcp2210', [dirname(__file__)])
        except ImportError:
            import _mcp2210
            return _mcp2210
        if fp is not None:
            try:
                _mod = imp.load_module('_mcp2210', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mcp2210 = swig_import_helper()
    del swig_import_helper
else:
    import _mcp2210
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class GPPin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPPin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GPPin, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PinDesignation"] = _mcp2210.GPPin_PinDesignation_set
    __swig_getmethods__["PinDesignation"] = _mcp2210.GPPin_PinDesignation_get
    if _newclass:PinDesignation = _swig_property(_mcp2210.GPPin_PinDesignation_get, _mcp2210.GPPin_PinDesignation_set)
    __swig_setmethods__["GPIOOutput"] = _mcp2210.GPPin_GPIOOutput_set
    __swig_getmethods__["GPIOOutput"] = _mcp2210.GPPin_GPIOOutput_get
    if _newclass:GPIOOutput = _swig_property(_mcp2210.GPPin_GPIOOutput_get, _mcp2210.GPPin_GPIOOutput_set)
    __swig_setmethods__["GPIODirection"] = _mcp2210.GPPin_GPIODirection_set
    __swig_getmethods__["GPIODirection"] = _mcp2210.GPPin_GPIODirection_get
    if _newclass:GPIODirection = _swig_property(_mcp2210.GPPin_GPIODirection_get, _mcp2210.GPPin_GPIODirection_set)
    def __init__(self): 
        this = _mcp2210.new_GPPin()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mcp2210.delete_GPPin
    __del__ = lambda self : None;
GPPin_swigregister = _mcp2210.GPPin_swigregister
GPPin_swigregister(GPPin)

class SPITransferSettingsDef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPITransferSettingsDef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SPITransferSettingsDef, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BitRate"] = _mcp2210.SPITransferSettingsDef_BitRate_set
    __swig_getmethods__["BitRate"] = _mcp2210.SPITransferSettingsDef_BitRate_get
    if _newclass:BitRate = _swig_property(_mcp2210.SPITransferSettingsDef_BitRate_get, _mcp2210.SPITransferSettingsDef_BitRate_set)
    __swig_setmethods__["IdleChipSelectValue"] = _mcp2210.SPITransferSettingsDef_IdleChipSelectValue_set
    __swig_getmethods__["IdleChipSelectValue"] = _mcp2210.SPITransferSettingsDef_IdleChipSelectValue_get
    if _newclass:IdleChipSelectValue = _swig_property(_mcp2210.SPITransferSettingsDef_IdleChipSelectValue_get, _mcp2210.SPITransferSettingsDef_IdleChipSelectValue_set)
    __swig_setmethods__["ActiveChipSelectValue"] = _mcp2210.SPITransferSettingsDef_ActiveChipSelectValue_set
    __swig_getmethods__["ActiveChipSelectValue"] = _mcp2210.SPITransferSettingsDef_ActiveChipSelectValue_get
    if _newclass:ActiveChipSelectValue = _swig_property(_mcp2210.SPITransferSettingsDef_ActiveChipSelectValue_get, _mcp2210.SPITransferSettingsDef_ActiveChipSelectValue_set)
    __swig_setmethods__["CSToDataDelay"] = _mcp2210.SPITransferSettingsDef_CSToDataDelay_set
    __swig_getmethods__["CSToDataDelay"] = _mcp2210.SPITransferSettingsDef_CSToDataDelay_get
    if _newclass:CSToDataDelay = _swig_property(_mcp2210.SPITransferSettingsDef_CSToDataDelay_get, _mcp2210.SPITransferSettingsDef_CSToDataDelay_set)
    __swig_setmethods__["LastDataByteToCSDelay"] = _mcp2210.SPITransferSettingsDef_LastDataByteToCSDelay_set
    __swig_getmethods__["LastDataByteToCSDelay"] = _mcp2210.SPITransferSettingsDef_LastDataByteToCSDelay_get
    if _newclass:LastDataByteToCSDelay = _swig_property(_mcp2210.SPITransferSettingsDef_LastDataByteToCSDelay_get, _mcp2210.SPITransferSettingsDef_LastDataByteToCSDelay_set)
    __swig_setmethods__["SubsequentDataByteDelay"] = _mcp2210.SPITransferSettingsDef_SubsequentDataByteDelay_set
    __swig_getmethods__["SubsequentDataByteDelay"] = _mcp2210.SPITransferSettingsDef_SubsequentDataByteDelay_get
    if _newclass:SubsequentDataByteDelay = _swig_property(_mcp2210.SPITransferSettingsDef_SubsequentDataByteDelay_get, _mcp2210.SPITransferSettingsDef_SubsequentDataByteDelay_set)
    __swig_setmethods__["BytesPerSPITransfer"] = _mcp2210.SPITransferSettingsDef_BytesPerSPITransfer_set
    __swig_getmethods__["BytesPerSPITransfer"] = _mcp2210.SPITransferSettingsDef_BytesPerSPITransfer_get
    if _newclass:BytesPerSPITransfer = _swig_property(_mcp2210.SPITransferSettingsDef_BytesPerSPITransfer_get, _mcp2210.SPITransferSettingsDef_BytesPerSPITransfer_set)
    __swig_setmethods__["SPIMode"] = _mcp2210.SPITransferSettingsDef_SPIMode_set
    __swig_getmethods__["SPIMode"] = _mcp2210.SPITransferSettingsDef_SPIMode_get
    if _newclass:SPIMode = _swig_property(_mcp2210.SPITransferSettingsDef_SPIMode_get, _mcp2210.SPITransferSettingsDef_SPIMode_set)
    __swig_setmethods__["ErrorCode"] = _mcp2210.SPITransferSettingsDef_ErrorCode_set
    __swig_getmethods__["ErrorCode"] = _mcp2210.SPITransferSettingsDef_ErrorCode_get
    if _newclass:ErrorCode = _swig_property(_mcp2210.SPITransferSettingsDef_ErrorCode_get, _mcp2210.SPITransferSettingsDef_ErrorCode_set)
    def __init__(self): 
        this = _mcp2210.new_SPITransferSettingsDef()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mcp2210.delete_SPITransferSettingsDef
    __del__ = lambda self : None;
SPITransferSettingsDef_swigregister = _mcp2210.SPITransferSettingsDef_swigregister
SPITransferSettingsDef_swigregister(SPITransferSettingsDef)

class ChipSettingsDef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChipSettingsDef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChipSettingsDef, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GP"] = _mcp2210.ChipSettingsDef_GP_set
    __swig_getmethods__["GP"] = _mcp2210.ChipSettingsDef_GP_get
    if _newclass:GP = _swig_property(_mcp2210.ChipSettingsDef_GP_get, _mcp2210.ChipSettingsDef_GP_set)
    __swig_setmethods__["RemoteWakeUpEnabled"] = _mcp2210.ChipSettingsDef_RemoteWakeUpEnabled_set
    __swig_getmethods__["RemoteWakeUpEnabled"] = _mcp2210.ChipSettingsDef_RemoteWakeUpEnabled_get
    if _newclass:RemoteWakeUpEnabled = _swig_property(_mcp2210.ChipSettingsDef_RemoteWakeUpEnabled_get, _mcp2210.ChipSettingsDef_RemoteWakeUpEnabled_set)
    __swig_setmethods__["DedicatedFunctionInterruptPinMode"] = _mcp2210.ChipSettingsDef_DedicatedFunctionInterruptPinMode_set
    __swig_getmethods__["DedicatedFunctionInterruptPinMode"] = _mcp2210.ChipSettingsDef_DedicatedFunctionInterruptPinMode_get
    if _newclass:DedicatedFunctionInterruptPinMode = _swig_property(_mcp2210.ChipSettingsDef_DedicatedFunctionInterruptPinMode_get, _mcp2210.ChipSettingsDef_DedicatedFunctionInterruptPinMode_set)
    __swig_setmethods__["SPIBusReleaseMode"] = _mcp2210.ChipSettingsDef_SPIBusReleaseMode_set
    __swig_getmethods__["SPIBusReleaseMode"] = _mcp2210.ChipSettingsDef_SPIBusReleaseMode_get
    if _newclass:SPIBusReleaseMode = _swig_property(_mcp2210.ChipSettingsDef_SPIBusReleaseMode_get, _mcp2210.ChipSettingsDef_SPIBusReleaseMode_set)
    __swig_setmethods__["NVRamChipParamAccessControl"] = _mcp2210.ChipSettingsDef_NVRamChipParamAccessControl_set
    __swig_getmethods__["NVRamChipParamAccessControl"] = _mcp2210.ChipSettingsDef_NVRamChipParamAccessControl_get
    if _newclass:NVRamChipParamAccessControl = _swig_property(_mcp2210.ChipSettingsDef_NVRamChipParamAccessControl_get, _mcp2210.ChipSettingsDef_NVRamChipParamAccessControl_set)
    __swig_setmethods__["password"] = _mcp2210.ChipSettingsDef_password_set
    __swig_getmethods__["password"] = _mcp2210.ChipSettingsDef_password_get
    if _newclass:password = _swig_property(_mcp2210.ChipSettingsDef_password_get, _mcp2210.ChipSettingsDef_password_set)
    __swig_setmethods__["ErrorCode"] = _mcp2210.ChipSettingsDef_ErrorCode_set
    __swig_getmethods__["ErrorCode"] = _mcp2210.ChipSettingsDef_ErrorCode_get
    if _newclass:ErrorCode = _swig_property(_mcp2210.ChipSettingsDef_ErrorCode_get, _mcp2210.ChipSettingsDef_ErrorCode_set)
    def __init__(self): 
        this = _mcp2210.new_ChipSettingsDef()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mcp2210.delete_ChipSettingsDef
    __del__ = lambda self : None;
ChipSettingsDef_swigregister = _mcp2210.ChipSettingsDef_swigregister
ChipSettingsDef_swigregister(ChipSettingsDef)

class USBKeyParametersDef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, USBKeyParametersDef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, USBKeyParametersDef, name)
    __repr__ = _swig_repr
    __swig_setmethods__["VID"] = _mcp2210.USBKeyParametersDef_VID_set
    __swig_getmethods__["VID"] = _mcp2210.USBKeyParametersDef_VID_get
    if _newclass:VID = _swig_property(_mcp2210.USBKeyParametersDef_VID_get, _mcp2210.USBKeyParametersDef_VID_set)
    __swig_setmethods__["PID"] = _mcp2210.USBKeyParametersDef_PID_set
    __swig_getmethods__["PID"] = _mcp2210.USBKeyParametersDef_PID_get
    if _newclass:PID = _swig_property(_mcp2210.USBKeyParametersDef_PID_get, _mcp2210.USBKeyParametersDef_PID_set)
    __swig_setmethods__["HostPowered"] = _mcp2210.USBKeyParametersDef_HostPowered_set
    __swig_getmethods__["HostPowered"] = _mcp2210.USBKeyParametersDef_HostPowered_get
    if _newclass:HostPowered = _swig_property(_mcp2210.USBKeyParametersDef_HostPowered_get, _mcp2210.USBKeyParametersDef_HostPowered_set)
    __swig_setmethods__["SelfPowered"] = _mcp2210.USBKeyParametersDef_SelfPowered_set
    __swig_getmethods__["SelfPowered"] = _mcp2210.USBKeyParametersDef_SelfPowered_get
    if _newclass:SelfPowered = _swig_property(_mcp2210.USBKeyParametersDef_SelfPowered_get, _mcp2210.USBKeyParametersDef_SelfPowered_set)
    __swig_setmethods__["RemoteWakeupCapable"] = _mcp2210.USBKeyParametersDef_RemoteWakeupCapable_set
    __swig_getmethods__["RemoteWakeupCapable"] = _mcp2210.USBKeyParametersDef_RemoteWakeupCapable_get
    if _newclass:RemoteWakeupCapable = _swig_property(_mcp2210.USBKeyParametersDef_RemoteWakeupCapable_get, _mcp2210.USBKeyParametersDef_RemoteWakeupCapable_set)
    __swig_setmethods__["RequestedCurrentAmountFromHost"] = _mcp2210.USBKeyParametersDef_RequestedCurrentAmountFromHost_set
    __swig_getmethods__["RequestedCurrentAmountFromHost"] = _mcp2210.USBKeyParametersDef_RequestedCurrentAmountFromHost_get
    if _newclass:RequestedCurrentAmountFromHost = _swig_property(_mcp2210.USBKeyParametersDef_RequestedCurrentAmountFromHost_get, _mcp2210.USBKeyParametersDef_RequestedCurrentAmountFromHost_set)
    __swig_setmethods__["ErrorCode"] = _mcp2210.USBKeyParametersDef_ErrorCode_set
    __swig_getmethods__["ErrorCode"] = _mcp2210.USBKeyParametersDef_ErrorCode_get
    if _newclass:ErrorCode = _swig_property(_mcp2210.USBKeyParametersDef_ErrorCode_get, _mcp2210.USBKeyParametersDef_ErrorCode_set)
    def __init__(self): 
        this = _mcp2210.new_USBKeyParametersDef()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mcp2210.delete_USBKeyParametersDef
    __del__ = lambda self : None;
USBKeyParametersDef_swigregister = _mcp2210.USBKeyParametersDef_swigregister
USBKeyParametersDef_swigregister(USBKeyParametersDef)

class ManufacturerProductNameDef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ManufacturerProductNameDef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ManufacturerProductNameDef, name)
    __repr__ = _swig_repr
    __swig_setmethods__["USBStringDescriptorLength"] = _mcp2210.ManufacturerProductNameDef_USBStringDescriptorLength_set
    __swig_getmethods__["USBStringDescriptorLength"] = _mcp2210.ManufacturerProductNameDef_USBStringDescriptorLength_get
    if _newclass:USBStringDescriptorLength = _swig_property(_mcp2210.ManufacturerProductNameDef_USBStringDescriptorLength_get, _mcp2210.ManufacturerProductNameDef_USBStringDescriptorLength_set)
    __swig_setmethods__["USBStringDescriptorID"] = _mcp2210.ManufacturerProductNameDef_USBStringDescriptorID_set
    __swig_getmethods__["USBStringDescriptorID"] = _mcp2210.ManufacturerProductNameDef_USBStringDescriptorID_get
    if _newclass:USBStringDescriptorID = _swig_property(_mcp2210.ManufacturerProductNameDef_USBStringDescriptorID_get, _mcp2210.ManufacturerProductNameDef_USBStringDescriptorID_set)
    __swig_setmethods__["ManufacturerProductName"] = _mcp2210.ManufacturerProductNameDef_ManufacturerProductName_set
    __swig_getmethods__["ManufacturerProductName"] = _mcp2210.ManufacturerProductNameDef_ManufacturerProductName_get
    if _newclass:ManufacturerProductName = _swig_property(_mcp2210.ManufacturerProductNameDef_ManufacturerProductName_get, _mcp2210.ManufacturerProductNameDef_ManufacturerProductName_set)
    __swig_setmethods__["ErrorCode"] = _mcp2210.ManufacturerProductNameDef_ErrorCode_set
    __swig_getmethods__["ErrorCode"] = _mcp2210.ManufacturerProductNameDef_ErrorCode_get
    if _newclass:ErrorCode = _swig_property(_mcp2210.ManufacturerProductNameDef_ErrorCode_get, _mcp2210.ManufacturerProductNameDef_ErrorCode_set)
    def __init__(self): 
        this = _mcp2210.new_ManufacturerProductNameDef()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mcp2210.delete_ManufacturerProductNameDef
    __del__ = lambda self : None;
ManufacturerProductNameDef_swigregister = _mcp2210.ManufacturerProductNameDef_swigregister
ManufacturerProductNameDef_swigregister(ManufacturerProductNameDef)

class ChipStatusDef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChipStatusDef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChipStatusDef, name)
    __repr__ = _swig_repr
    __swig_setmethods__["SPIBusReleaseExtReqStat"] = _mcp2210.ChipStatusDef_SPIBusReleaseExtReqStat_set
    __swig_getmethods__["SPIBusReleaseExtReqStat"] = _mcp2210.ChipStatusDef_SPIBusReleaseExtReqStat_get
    if _newclass:SPIBusReleaseExtReqStat = _swig_property(_mcp2210.ChipStatusDef_SPIBusReleaseExtReqStat_get, _mcp2210.ChipStatusDef_SPIBusReleaseExtReqStat_set)
    __swig_setmethods__["SPIBusCurrentOwner"] = _mcp2210.ChipStatusDef_SPIBusCurrentOwner_set
    __swig_getmethods__["SPIBusCurrentOwner"] = _mcp2210.ChipStatusDef_SPIBusCurrentOwner_get
    if _newclass:SPIBusCurrentOwner = _swig_property(_mcp2210.ChipStatusDef_SPIBusCurrentOwner_get, _mcp2210.ChipStatusDef_SPIBusCurrentOwner_set)
    __swig_setmethods__["AttemptedPWDAccesses"] = _mcp2210.ChipStatusDef_AttemptedPWDAccesses_set
    __swig_getmethods__["AttemptedPWDAccesses"] = _mcp2210.ChipStatusDef_AttemptedPWDAccesses_get
    if _newclass:AttemptedPWDAccesses = _swig_property(_mcp2210.ChipStatusDef_AttemptedPWDAccesses_get, _mcp2210.ChipStatusDef_AttemptedPWDAccesses_set)
    __swig_setmethods__["PasswordGuessed"] = _mcp2210.ChipStatusDef_PasswordGuessed_set
    __swig_getmethods__["PasswordGuessed"] = _mcp2210.ChipStatusDef_PasswordGuessed_get
    if _newclass:PasswordGuessed = _swig_property(_mcp2210.ChipStatusDef_PasswordGuessed_get, _mcp2210.ChipStatusDef_PasswordGuessed_set)
    __swig_setmethods__["ErrorCode"] = _mcp2210.ChipStatusDef_ErrorCode_set
    __swig_getmethods__["ErrorCode"] = _mcp2210.ChipStatusDef_ErrorCode_get
    if _newclass:ErrorCode = _swig_property(_mcp2210.ChipStatusDef_ErrorCode_get, _mcp2210.ChipStatusDef_ErrorCode_set)
    def __init__(self): 
        this = _mcp2210.new_ChipStatusDef()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mcp2210.delete_ChipStatusDef
    __del__ = lambda self : None;
ChipStatusDef_swigregister = _mcp2210.ChipStatusDef_swigregister
ChipStatusDef_swigregister(ChipStatusDef)

class SPIDataTransferStatusDef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPIDataTransferStatusDef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SPIDataTransferStatusDef, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NumberOfBytesReceived"] = _mcp2210.SPIDataTransferStatusDef_NumberOfBytesReceived_set
    __swig_getmethods__["NumberOfBytesReceived"] = _mcp2210.SPIDataTransferStatusDef_NumberOfBytesReceived_get
    if _newclass:NumberOfBytesReceived = _swig_property(_mcp2210.SPIDataTransferStatusDef_NumberOfBytesReceived_get, _mcp2210.SPIDataTransferStatusDef_NumberOfBytesReceived_set)
    __swig_setmethods__["SPIEngineStatus"] = _mcp2210.SPIDataTransferStatusDef_SPIEngineStatus_set
    __swig_getmethods__["SPIEngineStatus"] = _mcp2210.SPIDataTransferStatusDef_SPIEngineStatus_get
    if _newclass:SPIEngineStatus = _swig_property(_mcp2210.SPIDataTransferStatusDef_SPIEngineStatus_get, _mcp2210.SPIDataTransferStatusDef_SPIEngineStatus_set)
    __swig_setmethods__["DataReceived"] = _mcp2210.SPIDataTransferStatusDef_DataReceived_set
    __swig_getmethods__["DataReceived"] = _mcp2210.SPIDataTransferStatusDef_DataReceived_get
    if _newclass:DataReceived = _swig_property(_mcp2210.SPIDataTransferStatusDef_DataReceived_get, _mcp2210.SPIDataTransferStatusDef_DataReceived_set)
    __swig_setmethods__["ErrorCode"] = _mcp2210.SPIDataTransferStatusDef_ErrorCode_set
    __swig_getmethods__["ErrorCode"] = _mcp2210.SPIDataTransferStatusDef_ErrorCode_get
    if _newclass:ErrorCode = _swig_property(_mcp2210.SPIDataTransferStatusDef_ErrorCode_get, _mcp2210.SPIDataTransferStatusDef_ErrorCode_set)
    def __init__(self): 
        this = _mcp2210.new_SPIDataTransferStatusDef()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mcp2210.delete_SPIDataTransferStatusDef
    __del__ = lambda self : None;
SPIDataTransferStatusDef_swigregister = _mcp2210.SPIDataTransferStatusDef_swigregister
SPIDataTransferStatusDef_swigregister(SPIDataTransferStatusDef)

class ExternalInterruptPinStatusDef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalInterruptPinStatusDef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalInterruptPinStatusDef, name)
    __repr__ = _swig_repr
    __swig_setmethods__["InterruptEventCounter"] = _mcp2210.ExternalInterruptPinStatusDef_InterruptEventCounter_set
    __swig_getmethods__["InterruptEventCounter"] = _mcp2210.ExternalInterruptPinStatusDef_InterruptEventCounter_get
    if _newclass:InterruptEventCounter = _swig_property(_mcp2210.ExternalInterruptPinStatusDef_InterruptEventCounter_get, _mcp2210.ExternalInterruptPinStatusDef_InterruptEventCounter_set)
    __swig_setmethods__["ErrorCode"] = _mcp2210.ExternalInterruptPinStatusDef_ErrorCode_set
    __swig_getmethods__["ErrorCode"] = _mcp2210.ExternalInterruptPinStatusDef_ErrorCode_get
    if _newclass:ErrorCode = _swig_property(_mcp2210.ExternalInterruptPinStatusDef_ErrorCode_get, _mcp2210.ExternalInterruptPinStatusDef_ErrorCode_set)
    def __init__(self): 
        this = _mcp2210.new_ExternalInterruptPinStatusDef()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mcp2210.delete_ExternalInterruptPinStatusDef
    __del__ = lambda self : None;
ExternalInterruptPinStatusDef_swigregister = _mcp2210.ExternalInterruptPinStatusDef_swigregister
ExternalInterruptPinStatusDef_swigregister(ExternalInterruptPinStatusDef)

class GPPinDef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPPinDef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GPPinDef, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GP"] = _mcp2210.GPPinDef_GP_set
    __swig_getmethods__["GP"] = _mcp2210.GPPinDef_GP_get
    if _newclass:GP = _swig_property(_mcp2210.GPPinDef_GP_get, _mcp2210.GPPinDef_GP_set)
    __swig_setmethods__["ErrorCode"] = _mcp2210.GPPinDef_ErrorCode_set
    __swig_getmethods__["ErrorCode"] = _mcp2210.GPPinDef_ErrorCode_get
    if _newclass:ErrorCode = _swig_property(_mcp2210.GPPinDef_ErrorCode_get, _mcp2210.GPPinDef_ErrorCode_set)
    def __init__(self): 
        this = _mcp2210.new_GPPinDef()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mcp2210.delete_GPPinDef
    __del__ = lambda self : None;
GPPinDef_swigregister = _mcp2210.GPPinDef_swigregister
GPPinDef_swigregister(GPPinDef)


def EnumerateMCP2210():
  return _mcp2210.EnumerateMCP2210()
EnumerateMCP2210 = _mcp2210.EnumerateMCP2210

def InitMCP2210(*args):
  return _mcp2210.InitMCP2210(*args)
InitMCP2210 = _mcp2210.InitMCP2210

def ReleaseMCP2210(*args):
  return _mcp2210.ReleaseMCP2210(*args)
ReleaseMCP2210 = _mcp2210.ReleaseMCP2210

def SendUSBCmd(*args):
  return _mcp2210.SendUSBCmd(*args)
SendUSBCmd = _mcp2210.SendUSBCmd

def GetSPITransferSettings(*args):
  return _mcp2210.GetSPITransferSettings(*args)
GetSPITransferSettings = _mcp2210.GetSPITransferSettings

def SetSPITransferSettings(*args):
  return _mcp2210.SetSPITransferSettings(*args)
SetSPITransferSettings = _mcp2210.SetSPITransferSettings

def GetChipSettings(*args):
  return _mcp2210.GetChipSettings(*args)
GetChipSettings = _mcp2210.GetChipSettings

def SetChipSettings(*args):
  return _mcp2210.SetChipSettings(*args)
SetChipSettings = _mcp2210.SetChipSettings

def GetUSBKeyParameters(*args):
  return _mcp2210.GetUSBKeyParameters(*args)
GetUSBKeyParameters = _mcp2210.GetUSBKeyParameters

def SetUSBKeyParameters(*args):
  return _mcp2210.SetUSBKeyParameters(*args)
SetUSBKeyParameters = _mcp2210.SetUSBKeyParameters

def GetManufacturerProductName(*args):
  return _mcp2210.GetManufacturerProductName(*args)
GetManufacturerProductName = _mcp2210.GetManufacturerProductName

def SetManufacturerProductName(*args):
  return _mcp2210.SetManufacturerProductName(*args)
SetManufacturerProductName = _mcp2210.SetManufacturerProductName

def SendAccessPassword(*args):
  return _mcp2210.SendAccessPassword(*args)
SendAccessPassword = _mcp2210.SendAccessPassword

def ReadEEPROM(*args):
  return _mcp2210.ReadEEPROM(*args)
ReadEEPROM = _mcp2210.ReadEEPROM

def WriteEEPROM(*args):
  return _mcp2210.WriteEEPROM(*args)
WriteEEPROM = _mcp2210.WriteEEPROM

def RequestSPIBusRelease(*args):
  return _mcp2210.RequestSPIBusRelease(*args)
RequestSPIBusRelease = _mcp2210.RequestSPIBusRelease

def GetChipStatus(*args):
  return _mcp2210.GetChipStatus(*args)
GetChipStatus = _mcp2210.GetChipStatus

def CancelSPITransfer(*args):
  return _mcp2210.CancelSPITransfer(*args)
CancelSPITransfer = _mcp2210.CancelSPITransfer

def SPIDataTransfer(*args):
  return _mcp2210.SPIDataTransfer(*args)
SPIDataTransfer = _mcp2210.SPIDataTransfer

def SPISendReceive(*args):
  return _mcp2210.SPISendReceive(*args)
SPISendReceive = _mcp2210.SPISendReceive

def GetNumOfEventsFromInterruptPin(*args):
  return _mcp2210.GetNumOfEventsFromInterruptPin(*args)
GetNumOfEventsFromInterruptPin = _mcp2210.GetNumOfEventsFromInterruptPin

def GetGPIOPinDirection(*args):
  return _mcp2210.GetGPIOPinDirection(*args)
GetGPIOPinDirection = _mcp2210.GetGPIOPinDirection

def SetGPIOPinDirection(*args):
  return _mcp2210.SetGPIOPinDirection(*args)
SetGPIOPinDirection = _mcp2210.SetGPIOPinDirection

def GetGPIOPinValue(*args):
  return _mcp2210.GetGPIOPinValue(*args)
GetGPIOPinValue = _mcp2210.GetGPIOPinValue

def SetGPIOPinVal(*args):
  return _mcp2210.SetGPIOPinVal(*args)
SetGPIOPinVal = _mcp2210.SetGPIOPinVal
# This file is compatible with both classic and new-style classes.


